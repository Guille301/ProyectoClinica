// <auto-generated />
using System;
using LogicaAccesoDatos;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LogicaAccesoDatos.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.1");

            modelBuilder.Entity("LogicaNegocio.Entidades.Evolucion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DescripcionEvolucion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("HistorialClinicoId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdHistoria")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("fecha")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("HistorialClinicoId");

                    b.ToTable("Evoluciones");
                });

            modelBuilder.Entity("LogicaNegocio.Entidades.HistorialesClinicos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Antecedentes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Diagnostico")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EnfermedadActual")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ExamenFisico")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ExameneLaboratorio")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("HabitosPSB")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MotivoDeConsulta")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PacienteId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Tratamiento")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PacienteId")
                        .IsUnique();

                    b.ToTable("HistorialesClinicos");
                });

            modelBuilder.Entity("LogicaNegocio.Entidades.Pacientes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("TEXT");

                    b.Property<string>("NombreCompleto")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NumeroDocumento")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Patologia")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UsuarioEmail")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Pacientes");
                });

            modelBuilder.Entity("LogicaNegocio.Entidades.Usuarios", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("LogicaNegocio.Entidades.Evolucion", b =>
                {
                    b.HasOne("LogicaNegocio.Entidades.HistorialesClinicos", "HistorialClinico")
                        .WithMany()
                        .HasForeignKey("HistorialClinicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HistorialClinico");
                });

            modelBuilder.Entity("LogicaNegocio.Entidades.HistorialesClinicos", b =>
                {
                    b.HasOne("LogicaNegocio.Entidades.Pacientes", "Paciente")
                        .WithOne("historialesClinicos")
                        .HasForeignKey("LogicaNegocio.Entidades.HistorialesClinicos", "PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("LogicaNegocio.Entidades.Pacientes", b =>
                {
                    b.Navigation("historialesClinicos")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
